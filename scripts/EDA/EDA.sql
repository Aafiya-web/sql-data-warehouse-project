-- exploratory data analysis kmperformed on the data warehouse created

use DataWarehouse;
SELECT DISTINCT 
sales_amount 
from gold.fact_sales;
SELECT DISTINCT 
category
from gold.dim_products;
SELECT DISTINCT 
product_name
from gold.dim_products;
SELECT DISTINCT 
quantity 
from gold.fact_sales;

-- datawarehouse exploration
-- DATABASE EXPLORATION
-- explore all objects in the database
SELECT * FROM INFORMATION_SCHEMA.TABLES
-- explore all columns in the database
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers';

-- dimension exploration

-- explore all countries our customers are from
select distinct country from gold.dim_customers;
-- explore all categories "the major divisions"
select distinct category, subcategory ,product_name from gold.dim_products
ORDER BY 1,2,3

-- measure exploration

-- FIND THE TOTAL SALES
SELECT SUM(sales_amount) as total_sales from gold.fact_sales;
-- FIND HOW MANY ITEMS ARE SOLD
SELECT SUM(quantity) as total_quantity from gold.fact_sales;
-- FIND THE AVERAGE SELLING PRICE
SELECT AVG(price) as Average_price from gold.fact_sales;
-- FIND THE TOTAL NUMBER OF ORDERS
SELECT COUNT(order_number) as total_orders from gold.fact_sales;
SELECT COUNT(distinct order_number) as total_orders from gold.fact_sales;
-- FIND THE TOTAL NUMBER OF PRODUCTS
SELECT COUNT(product_name) as total_products from gold.dim_products;
-- FIND THE TOTAL NUMBER OF CUSTOMERS
SELECT COUNT(customer_key) as total_customers from gold.dim_customers;
-- FIND THE TOTAL NUMBER OF CUSTOMERS THAT HAS PLACED AN ORDER
SELECT COUNT(distinct customer_key) as total_customers from gold.fact_sales;


-- generate a report that shows all key metrics of the business
SELECT 'Total sales' as measure_name, sum(sales_amount) as measure_value from gold.fact_sales
UNION ALL
SELECT 'Total quantity' , sum(quantity)  from gold.fact_sales
UNION ALL
SELECT 'Average price',AVG(price)  from gold.fact_sales
UNION ALL
SELECT 'total nr. orders', COUNT(distinct order_number)  from gold.fact_sales
UNION ALL
SELECT 'total nr. products' ,COUNT(product_name)  from gold.dim_products
UNION ALL
SELECT 'total nr. customers', COUNT(customer_key)  from gold.dim_customers;



-- Magnitude analysis

-- FIND TOTAL CUSTOMERS BY COUNTRIES
SELECT
country,
COUNT(customer_key) AS total_customers
from gold.dim_customers
group by country
order by total_customers desc;

-- FIND TOTAL CUSTOMERS BY GENDER
SELECT
gender,
COUNT(customer_key) AS total_customers
from gold.dim_customers
group by gender
order by total_customers desc;

-- FIND TOTAL PRODUCST BY CATEGORY
select 
category,
count(product_key) as total_products
from gold.dim_products
group by category
order by  total_products desc;

-- WHAT IS THE AVERAGE COST IN EACH CATEGORY ?
select 
category,
Avg(cost) as avg_costs
from gold.dim_products
group by category
order by  avg_costs desc;

--  WHAT IS THE TOTAL  REVENUE GENERATED FOR EACH CATEGORY ?
select 
p.category,
sum(f.sales_amount) total_revenue
from gold.fact_sales f
left join gold.dim_products p
on p.product_key = f.product_key
group by p.category
order by total_revenue desc;

-- FIND TOTAL REVENUE GENERATED BY EACH CUSTOMER
select 
c.customer_key,
c.first_name,
c.last_name,
sum (f.sales_amount) as total_revenue
from 
gold.fact_sales f
left join gold.dim_customers c
on c.customer_key = f.customer_key
group by 
c.customer_key,
c.first_name,
c.last_name
order by total_revenue desc;

--WHAT IS THE DISTRIBUTION OF SOLD ITMENS ACROSS COUNTRIES?
select 
c.country,
sum (f.quantity) as total_sold_items
from 
gold.fact_sales f
left join gold.dim_customers c
on c.customer_key = f.customer_key
group by 
c.country
order by total_sold_items desc;


-- DATE EXPLORATION

--FIND THE DATE OF THE FIRST AND LAST ORDER
SELECT 
	MIN(order_date) AS first_order_date, 
	MAX(order_date) AS last_order_date,
	DATEDIFF(year,MIN(order_date) , max(order_date)) as order_range_years
FROM gold.fact_sales;
-- FIND THE YOUNGUEST AND THE OLDEST CUSTOMER
SELECT 
MIN(birthdate) AS OLDEST_CUST,
DATEDIFF(YEAR, MIN(birthdate), getdate() ) as oldest_age,
MAX(birthdate) AS YOUNGEST_CUST,
DATEDIFF(YEAR, MAX(birthdate), getdate() ) as youngest_age
FROM GOLD.dim_customers;



-- exploratory analysis

-- which 5 products  generate the highest revenue?
select top 5
p.product_name,
sum(f.sales_amount) total_revenue
from gold.fact_sales f
left join gold.dim_products p
on p.product_key = f.product_key
group by p.product_name
order by total_revenue desc;


-- by using window functions
select *
from(
select 
p.product_name,
sum(f.sales_amount) total_revenue,
row_number() over (order by sum(f.sales_amount) desc) as rank_products
from gold.fact_sales f
left join gold.dim_products p
on p.product_key = f.product_key
group by p.product_name)t
where rank_products <=5

-- what are the 5 worst - performing products in terms of sales?
select top 5
p.product_name,
sum(f.sales_amount) total_revenue
from gold.fact_sales f
left join gold.dim_products p
on p.product_key = f.product_key
group by p.product_name
order by total_revenue ;

-- which 5 sub-category  generate the highest revenue?
select top 5
p.subcategory,
sum(f.sales_amount) total_revenue
from gold.fact_sales f
left join gold.dim_products p
on p.product_key = f.product_key
group by p.subcategory
order by total_revenue desc;
-- what are the 5 worst - performing sub-category in terms of sales?
select top 5
p.subcategory,
sum(f.sales_amount) total_revenue
from gold.fact_sales f
left join gold.dim_products p
on p.product_key = f.product_key
group by p.subcategory
order by total_revenue ;-- find the top 10 customers who have generated the highest revenue
select top 10
c.customer_key,
c.first_name,
c.last_name,
sum (f.sales_amount) as total_revenue
from 
gold.fact_sales f
left join gold.dim_customers c
on c.customer_key = f.customer_key
group by 
c.customer_key,
c.first_name,
c.last_name
order by total_revenue desc;
-- 3 customers with the fewest orders placed
select top 3
c.customer_key,
c.first_name,
c.last_name,
count (distinct f.order_number) as total_orders
from 
gold.fact_sales f
left join gold.dim_customers c
on c.customer_key = f.customer_key
group by 
c.customer_key,
c.first_name,
c.last_name
order by total_orders ;





